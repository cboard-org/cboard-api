swagger: "2.0"
info:
  description: "CBoard API provides backend functionality and persistence to the CBoard application"
  version: "0.0.1"
  title: CBoard API
  termsOfService: "http://cboard.io"
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.  
     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.
     The following syntax must be used in the 'Authorization' header :
         Bearer xxxxxx.yyyyyyy.zzzzzz

# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
parameters:
  User:
    name: user
    in: body
    description: User data for creating a new local user 
    required: true
    schema:
      $ref: "#/definitions/User" 
  Board:
    name: board
    in: body
    description: Board data for creating a new custom board 
    required: true
    schema:
      $ref: "#/definitions/Board" 
paths:
  /swagger:
    x-swagger-pipe: swagger_raw
    
  /user:
    x-swagger-router-controller: user
    post:
      operationId: createUser
      description: Create a new temporary user in database and send an email to validate the user.
      parameters:
        - $ref: '#/parameters/User'
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TempUserResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      operationId: listUser
      description: Returns the full users list for the confirmed users.
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetUserListResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/{id}:
    x-swagger-router-controller: user
    get:
      operationId: getUser
      description: Returns a specific user
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      parameters:
        - name: id
          type: string
          in: path
          required: true
          minimum: 1
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetUserResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      operationId: updateUser
      description: Updates a specific user
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      parameters:
        - name: id
          description: User Id
          type: string
          in: path
          required: true
          minimum: 1
        - name: info
          description: User properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetUserResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      operationId: removeUser
      description: Deletes a specific user
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      parameters:
        - name: id
          description: User id
          type: string
          in: path
          required: true
          minimum: 1
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetUserResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/activate/{url}:
    x-swagger-router-controller: user
    post:
      operationId: activateUser
      description: Create a new user by copying it from temporary users and it removes the temporary user
      parameters:
        - in: path
          name: url
          description: Random generated key for user activation
          required: true
          type: string
          minimum: 1
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserActivatedResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/login/{role}:
    x-swagger-router-controller: user
    post:
      operationId: loginUser
      description: Returns a valid token for a user, that can be used for api authentication.
      parameters:
        - name: role
          description: user role
          in: path
          required: true
          type: string
        - name: info
          description: User properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserLogin"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetUserResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/logout:
    x-swagger-router-controller: user
    post:
      operationId: logoutUser
      description: Destroys user session and authentication token.
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      parameters:
        - name: info
          description: User properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserLogin"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/LogoutResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"


  /board:
    x-swagger-router-controller: board
    post:
      operationId: createBoard
      description: Create a new board in database and send an email to notify the user.
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      parameters:
        - $ref: '#/parameters/Board'
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/BoardResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      operationId: listBoard
      description: Returns the full boards list.
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetBoardListResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /board/{id}:
    x-swagger-router-controller: board
    get:
      operationId: getBoard
      description: Returns a specific board
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      parameters:
        - name: id
          type: string
          in: path
          required: true
          minimum: 1
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetBoardResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      operationId: updateBoard
      description: Updates a specific board
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      parameters:
        - name: id
          description: Board Id
          type: string
          in: path
          required: true
          minimum: 1
        - name: info
          description: Board properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/Board"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetBoardResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      operationId: removeBoard
      description: Deletes a specific board
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      parameters:
        - name: id
          description: Board id
          type: string
          in: path
          required: true
          minimum: 1
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetBoardResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /board/byemail/{email}:
    x-swagger-router-controller: board
    get:
      operationId: getBoardsEmail
      description: Returns boards for a specific user email
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      parameters:
        - name: email
          type: string
          in: path
          required: true
          minimum: 1
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetBoardListResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
# complex objects have schema definitions
definitions:
  User:
      type: object
      required:
      - name
      - email
      - password
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        birthdate:
            type: string
            format: date-time
        locale:
          type: string
          enum:  &APP_LANGS ['ar-SA','bn-BD','cs-CZ','da-DK','de-DE','el-GR','en-US','en-GB','es-ES','fi-FI','fr-FR','he-IL','hi-IN','hu-HU','id-ID','it-IT','ja-JP','km-KH','ko-KR','ne-NP','nl-NL','no-NO','pl-PL','pt-BR','pt-PT','ro-RO','ru-RU','si-LK','sk-SK','sv-SE','th-TH','tr-TR','uk-UA','vi-VN','zh-CN','zu-ZA']
  Board:
      type: object
      required:
      - name
      - email
      - content
      properties:
        name:
          type: string
        email:
          type: string
        content:
          type: object
        format:
          type: string
        locale:
          type: string
          enum:  &APP_LANGS ['ar-SA','bn-BD','cs-CZ','da-DK','de-DE','el-GR','en-US','en-GB','es-ES','fi-FI','fr-FR','he-IL','hi-IN','hu-HU','id-ID','it-IT','ja-JP','km-KH','ko-KR','ne-NP','nl-NL','no-NO','pl-PL','pt-BR','pt-PT','ro-RO','ru-RU','si-LK','sk-SK','sv-SE','th-TH','tr-TR','uk-UA','vi-VN','zh-CN','zu-ZA']
  UserLogin:
      type: object
      required:
      - email
      - password
      properties:
        email:
          type: string
        password:
          type: string
  GeneralResponse:
    type: object
    properties:
      success:
        type: number
        description: returns 1 if successful
      message:
        type: string
        description: a short comment
    required:
      - success
      - message
  UserActivatedResponse:
    type: object
    properties:
      success:
        type: number
        description: returns 1 if successful
      userid:
        type: string
        description: the id for the activated user
      message:
        type: string
        description: a short comment
    required:
      - success
      - message
  TempUserResponse:
    type: object
    properties:
      success:
        type: number
        description: returns 1 if successful
      url:
        type: string
        description: generated verifying url
      message:
        type: string 
        description: a short comment
    required:
      - success
      - url
      - message
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  GetUserListResponse:
    required:
      - keywords
    properties:
      keywords:
        type: object
        properties:
            name:
              type: string
            email:
              type: string
            password:
              type: string
  GetUserResponse:
    required:
        - name
        - email
        - locale
    properties:
        name:
          type: string
        email:
          type: string
        locale:
          type: string
  LogoutResponse:
      required:
          - message
      properties:
        message:
            type: string
  GetBoardResponse:
    required:
        - name
        - email
        - boardid
        - content
    properties:
        name:
          type: string
        email:
          type: string
        boardid:
          type: string
        content:
          type: object
  BoardResponse:
    type: object
    properties:
      success:
        type: number
        description: returns 1 if successful
      boardid:
        type: string
        description: self-generated id for the board
      content:
        type: object
        description: generated board contents
      message:
        type: string 
        description: a short comment
    required:
      - success
      - boardid
      - content
      - message
  GetBoardListResponse:
    required:
      - keywords
    properties:
      keywords:
        type: object
        properties:
            name:
              type: string
            email:
              type: string
            content:
              type: object